# .github/workflows/parallel_backfill.yml
name: Parallel Commit Backfill

on:
  workflow_dispatch:
    inputs:
      # How many days ago to begin the window (e.g. 30 → window starts 30 days ago)
      start_offset_days:
        description: "Days ago to start backfill window"
        required: true
        default: 30
      # How many days long the window should be
      backfill_days:
        description: "Length of backfill window, in days"
        required: true
        default: 30

jobs:
  backfill:
    runs-on: ubuntu-latest
    timeout-minutes: 2880        # 48h
    strategy:
      fail-fast: false          # let all matrix slices run, even if some fail
      matrix:
        chunk: [0,1,2,3,4,5]     # 6 parallel slices; change count & array if desired

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Java & Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven openjdk-17-jdk

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Compute full window & this chunk’s window
        id: dates
        run: |
          START_OFFSET=${{ github.event.inputs.start_offset_days }}
          BACKFILL_DAYS=${{ github.event.inputs.backfill_days }}
          SLICES=6
          CHUNK=${{ matrix.chunk }}

          # Compute absolute window
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          WINDOW_START=$(date -u -d "$NOW - $START_OFFSET days" +"%Y-%m-%dT%H:%M:%SZ")
          WINDOW_END=$(date -u -d "$WINDOW_START + $BACKFILL_DAYS days" +"%Y-%m-%dT%H:%M:%SZ")

          echo "Full window: $WINDOW_START → $WINDOW_END"

          # Divide into SLICES chunks, distributing remainder among first slices
          BASE=$(( BACKFILL_DAYS / SLICES ))
          REM=$(( BACKFILL_DAYS % SLICES ))
          if (( CHUNK < REM )); then
            SLICE_SIZE=$(( BASE + 1 ))
            SLICE_OFFSET=$(( CHUNK * SLICE_SIZE ))
          else
            SLICE_SIZE=$BASE
            SLICE_OFFSET=$(( REM * (BASE + 1) + (CHUNK - REM) * BASE ))
          fi

          CHUNK_START=$(date -u -d "$WINDOW_START + $SLICE_OFFSET days" +"%Y-%m-%dT%H:%M:%SZ")
          CHUNK_END=$(date -u -d "$CHUNK_START + $SLICE_SIZE days" +"%Y-%m-%dT%H:%M:%SZ")
          # Cap to WINDOW_END
          if [[ "$(date -d "$CHUNK_END" +%s)" -gt "$(date -d "$WINDOW_END" +%s)" ]]; then
            CHUNK_END="$WINDOW_END"
          fi

          echo "Slice #$CHUNK: $CHUNK_START → $CHUNK_END"
          echo "start=$CHUNK_START" >> $GITHUB_OUTPUT
          echo "end=$CHUNK_END"     >> $GITHUB_OUTPUT

      - name: Run backfill for chunk ${{ matrix.chunk }}
        continue-on-error: true
        run: |
          CHUNK_DIR="data/chunk-${{ matrix.chunk }}"
          mkdir -p "$CHUNK_DIR"
          scripts/.pinot_backfill_commit_compare.sh \
            --start "${{ steps.dates.outputs.start }}" \
            --end   "${{ steps.dates.outputs.end }}" \
            --outdir "$CHUNK_DIR"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload chunk artifact
        uses: actions/upload-artifact@v4
        with:
          name: chunk-${{ matrix.chunk }}
          path: data/chunk-${{ matrix.chunk }}

  merge:
    needs: backfill
    if: ${{ always() }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo (full history)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download chunk artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
          if-no-files-found: ignore

      - name: Combine all reports
        run: |
          mkdir -p data/japicmp data/output
          if [[ -d artifacts ]]; then
            find artifacts/ -type f -path "*/japicmp/*.json" \
              -exec cp {} data/japicmp/ \;
            find artifacts/ -type f -path "*/output/*.json" \
              -exec cp {} data/output/ \;
          else
            echo "ℹ️ No artifacts to merge."
          fi

      - name: Sync with remote main
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main

      - name: Commit & push combined reports
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git add data/japicmp data/output
            git commit -m "chore: backfill ${GITHUB_EVENT_INPUTS_BACKFILL_DAYS}d from ${GITHUB_EVENT_INPUTS_START_OFFSET_DAYS}d ago"
            git push
          else
            echo "ℹ️ No new reports to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger Pages deploy
        run: gh workflow run deploy.yml --ref main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}