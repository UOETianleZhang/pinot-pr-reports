# .github/workflows/parallel_backfill.yml
name: Parallel Commit Backfill

on:
  workflow_dispatch:
    inputs:
      start_offset_days:
        description: "How many days ago to start (e.g. 30 → begin window 30 days ago)"
        required: true
        default: 30
      backfill_days:
        description: "How many days from that start to backfill"
        required: true
        default: 30

jobs:
  backfill:
    runs-on: ubuntu-latest
    timeout-minutes: 2880          # per‐job timeout (48h).
    strategy:
      fail-fast: false            # let all matrix slices run, even if one fails
      matrix:
        chunk: [0,1,2,3,4,5]       # 6 parallel slices; adjust count & array if you want finer chunks

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Java & Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven openjdk-17-jdk

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Compute date window for chunk ${{ matrix.chunk }}
        id: dates
        run: |
          # Inputs
          START_OFFSET=${{ github.event.inputs.start_offset_days }}
          BACKFILL_DAYS=${{ github.event.inputs.backfill_days }}
          SLICES=6
          CHUNK=${{ matrix.chunk }}

          # Now & absolute window
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          WINDOW_START=$(date -u -d "$NOW - $START_OFFSET days" +"%Y-%m-%dT%H:%M:%SZ")
          WINDOW_END=$(date -u -d "$WINDOW_START + $BACKFILL_DAYS days" +"%Y-%m-%dT%H:%M:%SZ")
          echo "Full window: $WINDOW_START → $WINDOW_END"

          # Compute per-slice base and remainder
          BASE=$(( BACKFILL_DAYS / SLICES ))
          REM=$(( BACKFILL_DAYS % SLICES ))

          # Each of the first REM slices gets BASE+1 days; the rest get BASE days
          if (( CHUNK < REM )); then
            SLICE_SIZE=$(( BASE + 1 ))
            SLICE_OFFSET=$(( CHUNK * (BASE + 1) ))
          else
            SLICE_SIZE=$BASE
            SLICE_OFFSET=$(( REM * (BASE + 1) + (CHUNK - REM) * BASE ))
          fi

          # Compute this slice’s start & end
          CHUNK_START=$(date -u -d "$WINDOW_START + $SLICE_OFFSET days" +"%Y-%m-%dT%H:%M:%SZ")
          CHUNK_END=$(date -u -d "$CHUNK_START + $SLICE_SIZE days" +"%Y-%m-%dT%H:%M:%SZ")

          echo "Slice #$CHUNK: $CHUNK_START → $CHUNK_END"

          # Expose to next steps
          echo "start=$CHUNK_START" >> $GITHUB_OUTPUT
          echo "end=$CHUNK_END"   >> $GITHUB_OUTPUT

  merge:
    needs: backfill
    if: ${{ always() }}          # run even if some chunks failed
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0     # ← pull all commits, not just a single ref

      - name: Download chunk artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          if-no-files-found: ignore    # don’t fail if a chunk had no output

      - name: Combine all reports
        run: |
          mkdir -p data/japicmp data/output
          if [[ -d artifacts ]]; then
            find artifacts/ -type f -path "*/japicmp/*.json" \
              -exec cp {} data/japicmp/ \;
            find artifacts/ -type f -path "*/output/*.json" \
              -exec cp {} data/output/ \;
          else
            echo "⚠️  No artifacts directory—nothing to merge."
          fi

      - name: Sync with remote main
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main

      - name: Commit & push combined reports
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git add data/japicmp data/output
            git commit -m "chore: backfill ${GITHUB_EVENT_INPUTS_BACKFILL_DAYS}d from ${GITHUB_EVENT_INPUTS_START_OFFSET_DAYS}d ago"
            git push
          else
            echo "ℹ️  No new reports to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger Pages deploy
        run: gh workflow run deploy.yml --ref main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}